
import Foundation
import ProtocolType

%{
    import json
    
    modules = []
    with open('../../commonProtocols.json') as file:
        modules = json.loads(file.read())
}%
% for module in modules:
%{ moduleName = module['module'] }%

// ${moduleName}
#if canImport(${moduleName})
import ${moduleName}

% for type in module['types']:
%{ typeName = type['name'] }%
% if 'availability' in module:
${module['availability']}
% elif 'availability' in type:
${type['availability']}
% end
public protocol ${typeName}Visitor: AssociatedTypeRequirementsVisitor {
    associatedtype Visitor = ${typeName}Visitor
    associatedtype Input = ${typeName}
    associatedtype Output
    
    func callAsFunction<T : ${typeName}>(_ value: T) -> Output
}

% if 'availability' in module:
${module['availability']}
% elif 'availability' in type:
${type['availability']}
% end
extension ${typeName}Visitor {

    @inline(never)
    @_optimize(none)
    public func _test() {
        _ = self(${type['testValue']})
    }

}

% if 'availability' in module:
${module['availability']}
% elif 'availability' in type:
${type['availability']}
% end
public protocol ${typeName}TypeVisitor: AssociatedTypeRequirementsTypeVisitor {
    associatedtype Visitor = ${typeName}TypeVisitor
    associatedtype Input = ${typeName}
    associatedtype Output

    func callAsFunction<T : ${typeName}>(_ type: T.Type) -> Output
}

% if 'availability' in module:
${module['availability']}
% elif 'availability' in type:
${type['availability']}
% end
extension ${typeName}TypeVisitor {

    @inline(never)
    @_optimize(none)
    public func _test() {
        _ = self(${type['testType']}.self)
    }

}

% end
#endif
% end
